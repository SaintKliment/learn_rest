[
    {
        "label": "db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "db",
        "description": "db",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "items",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "stores",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "stores",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas",
        "description": "schemas",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ItemSchema",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ItemUpdateSchema",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "StoreSchema",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "blp",
        "importPath": "resources.item",
        "description": "resources.item",
        "isExtraImport": true,
        "detail": "resources.item",
        "documentation": {}
    },
    {
        "label": "blp",
        "importPath": "resources.store",
        "description": "resources.store",
        "isExtraImport": true,
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ItemModel",
        "kind": 6,
        "importPath": "models.item",
        "description": "models.item",
        "peekOfCode": "class ItemModel(db.Model):\n    __tablename__ = \"items\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    price = db.Column(db.Float(precision=2), unique=False, nullable=False)\n    store_id = db.Column(db.Integer, db.ForeignKey(\"stores.id\"), unique=False, nullable=False)\n    store = db.relationship(\"StoreModel\", back_populates=\"items\")",
        "detail": "models.item",
        "documentation": {}
    },
    {
        "label": "StoreModel",
        "kind": 6,
        "importPath": "models.store",
        "description": "models.store",
        "peekOfCode": "class StoreModel(db.Model):\n    __tablename__ = \"stores\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    items = db.relationship(\"ItemModel\", back_populates=\"store\", lazy=\"dynamic\")",
        "detail": "models.store",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "resources.item",
        "description": "resources.item",
        "peekOfCode": "class Item(MethodView):\n    @blp.response(200, ItemSchema)\n    def get(self, item_id): \n        try:\n            return items[item_id]\n        except KeyError:\n            abort(404, message=\"Store not found\")\n    def delete(self, item_id):\n        try: \n            del items[item_id]",
        "detail": "resources.item",
        "documentation": {}
    },
    {
        "label": "ItemList",
        "kind": 6,
        "importPath": "resources.item",
        "description": "resources.item",
        "peekOfCode": "class ItemList(MethodView):\n        @blp.response(200, ItemSchema(many=True))\n        def get():\n            return items.values()\n        @blp.arguments(ItemSchema)\n        @blp.response(200, ItemSchema)\n        def post(self, item_data):\n            for item in items.values():\n                if (\n                    item_data[\"name\"] == item[\"name\"]",
        "detail": "resources.item",
        "documentation": {}
    },
    {
        "label": "blp",
        "kind": 5,
        "importPath": "resources.item",
        "description": "resources.item",
        "peekOfCode": "blp = Blueprint(\"Items\", __name__, description=\"Operations on items\")\n@blp.route(\"/item/<string:item_id>\")\nclass Item(MethodView):\n    @blp.response(200, ItemSchema)\n    def get(self, item_id): \n        try:\n            return items[item_id]\n        except KeyError:\n            abort(404, message=\"Store not found\")\n    def delete(self, item_id):",
        "detail": "resources.item",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "class Store(MethodView):\n    @blp.response(200, StoreSchema)\n    def get(self, store_id):\n        try:\n            return stores[store_id]\n        except KeyError:\n            abort(404, message=\"Store not found\")\n    def delete(self, store_id):\n        try: \n            del stores[store_id]",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "StoreList",
        "kind": 6,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "class StoreList(MethodView):\n    @blp.response(200, StoreSchema(many=True))\n    def get(self):\n        return stores.values()\n    @blp.arguments(StoreSchema)\n    @blp.response(200, StoreSchema)\n    def post(self, store_data):\n        for store in stores.values():\n            if store_data[\"name\"] == store[\"name\"]:\n                abort(400, message=\"Store already exists\")",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "blp",
        "kind": 5,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "blp = Blueprint(\"stores\", __name__, description=\"Operations on stores\")\n@blp.route(\"/store/<string:store_id>\")\nclass Store(MethodView):\n    @blp.response(200, StoreSchema)\n    def get(self, store_id):\n        try:\n            return stores[store_id]\n        except KeyError:\n            abort(404, message=\"Store not found\")\n    def delete(self, store_id):",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config['API_TITLE'] = 'My store REST API'\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"PROPAGATE_EXCEPTIONS\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"PROPAGATE_EXCEPTIONS\"] = True\napp.config['API_TITLE'] = 'My store REST API'\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['API_TITLE']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['API_TITLE'] = 'My store REST API'\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.0.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_URL\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(ItemBlueprint)\napi.register_blueprint(StoreBlueprint)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "PlainItemSchema",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PlainItemSchema(Schema):\n    id = fields.Str(dump_only=True)\n    name = fields.Str(required=True)\n    price = fields.Float(required=True)\nclass ItemUpdateSchema(Schema):\n    name = fields.Str()\n    price = fields.Float()\nclass PlainStoreSchema(Schema):\n    id = fields.Str(dump_only=True)\n    name = fields.Str(required=True)",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ItemUpdateSchema",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class ItemUpdateSchema(Schema):\n    name = fields.Str()\n    price = fields.Float()\nclass PlainStoreSchema(Schema):\n    id = fields.Str(dump_only=True)\n    name = fields.Str(required=True)\nclass ItemSchema(PlainItemSchema):\n    store_id = fields.Int(required=True, load_only=True)\n    store = fields.Nested(PlainStoreSchema(), dump_only=True)\nclass StoreSchema(PlainStoreSchema):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PlainStoreSchema",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PlainStoreSchema(Schema):\n    id = fields.Str(dump_only=True)\n    name = fields.Str(required=True)\nclass ItemSchema(PlainItemSchema):\n    store_id = fields.Int(required=True, load_only=True)\n    store = fields.Nested(PlainStoreSchema(), dump_only=True)\nclass StoreSchema(PlainStoreSchema):\n    items = fields.list(fields.Nested(PlainItemSchema()), dump_only=True)",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ItemSchema",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class ItemSchema(PlainItemSchema):\n    store_id = fields.Int(required=True, load_only=True)\n    store = fields.Nested(PlainStoreSchema(), dump_only=True)\nclass StoreSchema(PlainStoreSchema):\n    items = fields.list(fields.Nested(PlainItemSchema()), dump_only=True)",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "StoreSchema",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class StoreSchema(PlainStoreSchema):\n    items = fields.list(fields.Nested(PlainItemSchema()), dump_only=True)",
        "detail": "schemas",
        "documentation": {}
    }
]